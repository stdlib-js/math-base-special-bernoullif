{
  "version": 3,
  "sources": ["../lib/bernoullif.json", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["[\n  1.0,\n  0.1666666716337204,\n  -0.03333333507180214,\n  0.02380952425301075,\n  -0.03333333507180214,\n  0.07575757801532745,\n  -0.2531135678291321,\n  1.1666666269302368,\n  -7.092156887054443,\n  54.97117614746094,\n  -529.124267578125,\n  6192.123046875,\n  -86580.25,\n  1425517.125,\n  -27298232.0,\n  601580864.0,\n  -15116315648.0,\n  429614628864.0,\n  -13711654780928.0,\n  488332312182784.0,\n  -19296579391324160.0,\n  841693056053805000.0,\n  -40338073359287845000.0,\n  2.1150748918604188e+21,\n  -1.2086626472668042e+23,\n  7.500866956719485e+24,\n  -5.038777949942763e+26,\n  3.652877742276384e+28,\n  -2.849876996904201e+30,\n  2.386542781638813e+32,\n  -2.1399950070596233e+34,\n  2.050097633557977e+36,\n  -2.0938006042234345e+38\n]\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeIntegerf = require( '@stdlib/math-base-assert-is-nonnegative-integerf' );\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\nvar isnanf = require( '@stdlib/math-base-assert-is-nanf' );\nvar isOdd = require( '@stdlib/math-base-assert-is-odd' );\nvar NINF = require( '@stdlib/constants-float32-ninf' );\nvar PINF = require( '@stdlib/constants-float32-pinf' );\nvar BERNOULLIF = require( './bernoullif.json' );\n\n\n// VARIABLES //\n\nvar MAX_BERNOULLI = 64|0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Computes the nth Bernoulli number as a single-precision floating-point number.\n*\n* @param {NonNegativeInteger} n - the Bernoulli number to compute\n* @returns {number} Bernoulli number\n*\n* @example\n* var y = bernoullif( 0 );\n* // returns 1.0\n*\n* @example\n* var y = bernoullif( 1 );\n* // returns 0.5\n*\n* @example\n* var y = bernoullif( 2 );\n* // returns ~0.167\n*\n* @example\n* var y = bernoullif( 3 );\n* // returns 0.0\n*\n* @example\n* var y = bernoullif( 4 );\n* // returns ~-0.033\n*\n* @example\n* var y = bernoullif( 5 );\n* // returns 0.0\n*\n* @example\n* var y = bernoullif( 20 );\n* // returns ~-529.124\n*\n* @example\n* var y = bernoullif( 66 );\n* // returns Infinity\n*\n* @example\n* var y = bernoullif( 68 );\n* // returns -Infinity\n*\n* @example\n* var y = bernoullif( NaN );\n* // returns NaN\n*/\nfunction bernoullif( n ) {\n\tif ( isnanf( n ) || !isNonNegativeIntegerf( n ) ) {\n\t\treturn NaN;\n\t}\n\tif ( n === 1 ) {\n\t\treturn 0.5;\n\t}\n\tif ( isOdd( n ) ) {\n\t\treturn 0.0;\n\t}\n\tif ( n > MAX_BERNOULLI ) {\n\t\treturn ( (n/2)&1 ) ? PINF : NINF;\n\t}\n\treturn float64ToFloat32( BERNOULLIF[ n/2 ] );\n}\n\n\n// EXPORTS //\n\nmodule.exports = bernoullif;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the nth Bernoulli number as a single-precision floating-point number.\n*\n* @module @stdlib/math-base-special-bernoullif\n*\n* @example\n* var bernoullif = require( '@stdlib/math-base-special-bernoullif' );\n*\n* var y = bernoullif( 0 );\n* // returns 1.0\n*\n* y = bernoullif( 1 );\n* // returns 0.5\n*\n* y = bernoullif( 2 );\n* // returns ~0.166\n*\n* y = bernoullif( 3 );\n* // returns 0.0\n*\n* y = bernoullif( 4 );\n* // returns ~-0.033\n*\n* y = bernoullif( 5 );\n* // returns 0.0\n*\n* y = bernoullif( 20 );\n* // returns ~-529.124\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,CAAAA,EAAA,SACE,EACA,kBACA,oBACA,mBACA,oBACA,mBACA,mBACA,mBACA,mBACA,kBACA,kBACA,eACA,UACA,cACA,UACA,UACA,aACA,aACA,eACA,gBACA,kBACA,kBACA,qBACA,oBACA,qBACA,mBACA,qBACA,oBACA,qBACA,oBACA,sBACA,oBACA,qBACF,IClCA,IAAAC,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAwB,QAAS,kDAAmD,EACpFC,EAAmB,QAAS,wCAAyC,EACrEC,EAAS,QAAS,kCAAmC,EACrDC,EAAQ,QAAS,iCAAkC,EACnDC,EAAO,QAAS,gCAAiC,EACjDC,EAAO,QAAS,gCAAiC,EACjDC,EAAa,IAKbC,EAAgB,GAmDpB,SAASC,EAAYC,EAAI,CACxB,OAAKP,EAAQO,CAAE,GAAK,CAACT,EAAuBS,CAAE,EACtC,IAEHA,IAAM,EACH,GAEHN,EAAOM,CAAE,EACN,EAEHA,EAAIF,EACEE,EAAE,EAAG,EAAMJ,EAAOD,EAEtBH,EAAkBK,EAAYG,EAAE,CAAE,CAAE,CAC5C,CAKAV,EAAO,QAAUS,ICnDjB,IAAIE,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_bernoullif", "__commonJSMin", "exports", "module", "require_main", "__commonJSMin", "exports", "module", "isNonNegativeIntegerf", "float64ToFloat32", "isnanf", "isOdd", "NINF", "PINF", "BERNOULLIF", "MAX_BERNOULLI", "bernoullif", "n", "main"]
}
