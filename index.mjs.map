{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeIntegerf from '@stdlib/math-base-assert-is-nonnegative-integerf';\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport isnanf from '@stdlib/math-base-assert-is-nanf';\nimport isOddf from '@stdlib/math-base-assert-is-oddf';\nimport NINF from '@stdlib/constants-float32-ninf';\nimport PINF from '@stdlib/constants-float32-pinf';\nimport BERNOULLIF from './bernoullif.json';\n\n\n// VARIABLES //\n\nvar MAX_BERNOULLI = 64|0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Computes the nth Bernoulli number as a single-precision floating-point number.\n*\n* @param {NonNegativeInteger} n - the Bernoulli number to compute\n* @returns {number} Bernoulli number\n*\n* @example\n* var y = bernoullif( 0 );\n* // returns 1.0\n*\n* @example\n* var y = bernoullif( 1 );\n* // returns 0.5\n*\n* @example\n* var y = bernoullif( 2 );\n* // returns ~0.167\n*\n* @example\n* var y = bernoullif( 3 );\n* // returns 0.0\n*\n* @example\n* var y = bernoullif( 4 );\n* // returns ~-0.033\n*\n* @example\n* var y = bernoullif( 5 );\n* // returns 0.0\n*\n* @example\n* var y = bernoullif( 20 );\n* // returns ~-529.124\n*\n* @example\n* var y = bernoullif( 66 );\n* // returns Infinity\n*\n* @example\n* var y = bernoullif( 68 );\n* // returns -Infinity\n*\n* @example\n* var y = bernoullif( NaN );\n* // returns NaN\n*/\nfunction bernoullif( n ) {\n\tif ( isnanf( n ) || !isNonNegativeIntegerf( n ) ) {\n\t\treturn NaN;\n\t}\n\tif ( n === 1 ) {\n\t\treturn 0.5;\n\t}\n\tif ( isOddf( n ) ) {\n\t\treturn 0.0;\n\t}\n\tif ( n > MAX_BERNOULLI ) {\n\t\treturn ( isOddf( n/2.0 ) ) ? PINF : NINF;\n\t}\n\treturn float64ToFloat32( BERNOULLIF[ n/2 ] );\n}\n\n\n// EXPORTS //\n\nexport default bernoullif;\n"],"names":["bernoullif","n","isnanf","isNonNegativeIntegerf","NaN","isOddf","PINF","NINF","float64ToFloat32","BERNOULLIF"],"mappings":";;upCAoFA,SAASA,EAAYC,GACpB,OAAKC,EAAQD,KAAQE,EAAuBF,GACpCG,IAEG,IAANH,EACG,GAEHI,EAAQJ,GACL,EAEHA,EA7Dc,GA8DTI,EAAQJ,EAAE,GAAUK,EAAOC,EAE9BC,EAAkBC,EAAYR,EAAE,GACxC"}